#Ui.R: Adding slider

library(shiny)
shinyUI(fluidPage(
  titlePanel("Slider App"),
  sidebarLayout(
  sidebarPanel(
    h1('Move the slider'),
    sliderInput('slider','slide me',0,100,0)
  ),
  mainPanel(
    h3('slider value:'),
    textOutput('text')
  )
  )
))

#Server.R:

library(shiny)
shinyServer(
  function(input, output) {
    output$text = renderText(input$slider*5)
  }
)
******************************************************************************

Ui.R:
shinyUI(pageWithSidebar(
  headerPanel("Illustrating markup"),
  sidebarPanel(
    h1('Sidebar panel'),
    h1('H1 text'),
    h2('H2 Text'),
    h3('H3 Text'),
    h4('H4 Text')
    
  ),
  mainPanel(
    h3('Main Panel text'),
    code('some code'),
    p('some ordinary text')
  )
))

Server.R:
library(shiny)
shinyServer(
  function(input, output) {
    
  }
)

***********************************************************************

Ui.R:

shinyUI(pageWithSidebar(
  headerPanel("Illustrating inputs"),
  sidebarPanel(
    numericInput('id1', 'Numeric input, labeled id1', 0, min = 0, max = 10, step = 1),
    checkboxGroupInput("id2", "Checkbox",
                   c("Value 1" = "1",
                     "Value 2" = "2",
                     "Value 3" = "3")),
    dateInput("date", "Date:")  
  ),
  mainPanel(
      
  )
))

Server.R:
library(shiny)
shinyServer(
  function(input, output) {
    
  }
)


**********************************************************************************

Ui.R:

shinyUI(pageWithSidebar(
  headerPanel("Illustrating inputs"),
  sidebarPanel(
    numericInput('id1', 'Numeric input, labeled id1', 0, min = 0, max = 10, step = 1),
    checkboxGroupInput("id2", "Checkbox",
                       c("Value 1" = "1",
                         "Value 2" = "2",
                         "Value 3" = "3")),
    dateInput("date", "Date:")  
  ),
  mainPanel(
    h3('Illustrating outputs'),
    h4('You entered'),
    verbatimTextOutput("oid1"),
    h4('You entered'),
    verbatimTextOutput("oid2"),
    h4('You entered'),
    verbatimTextOutput("odate")
  )
))

Server.R:

library(shiny)
shinyServer(
  function(input, output) {
    output$oid1 <- renderPrint({input$id1})
    output$oid2 <- renderPrint({input$id2})
    output$odate <- renderPrint({input$date})
  }
)
***************************************************************
MTCARS example:
Ui.R:

library(shiny)
shinyUI(fluidPage(
  titlePanel("Predict Horsepower from MPG"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("sliderMPG", "What is the MPG of the car?", 10, 35, value = 20),
      checkboxInput("showModel1", "Show/Hide Model 1", value = TRUE),
      checkboxInput("showModel2", "Show/Hide Model 2", value = TRUE)
    ),
    mainPanel(
      plotOutput("plot1"),
      h3("Predicted Horsepower from Model 1:"),
      textOutput("pred1"),
      h3("Predicted Horsepower from Model 2:"),
      textOutput("pred2")
    )
  )
))

Server.R:
library(shiny)
shinyServer(function(input, output) {
  mtcars$mpgsp <- ifelse(mtcars$mpg - 20 > 0, mtcars$mpg - 20, 0)
  model1 <- lm(hp ~ mpg, data = mtcars)
  model2 <- lm(hp ~ mpgsp + mpg, data = mtcars)
  
  model1pred <- reactive({
    mpgInput <- input$sliderMPG
    predict(model1, newdata = data.frame(mpg = mpgInput))
  })
  
  model2pred <- reactive({
    mpgInput <- input$sliderMPG
    predict(model2, newdata = 
              data.frame(mpg = mpgInput,
                         mpgsp = ifelse(mpgInput - 20 > 0,
                                        mpgInput - 20, 0)))
  })
  output$plot1 <- renderPlot({
    mpgInput <- input$sliderMPG
    
    plot(mtcars$mpg, mtcars$hp, xlab = "Miles Per Gallon", 
         ylab = "Horsepower", bty = "n", pch = 16,
         xlim = c(10, 35), ylim = c(50, 350))
    if(input$showModel1){
      abline(model1, col = "red", lwd = 2)
    }
    if(input$showModel2){
      model2lines <- predict(model2, newdata = data.frame(
        mpg = 10:35, mpgsp = ifelse(10:35 - 20 > 0, 10:35 - 20, 0)
      ))
      lines(10:35, model2lines, col = "blue", lwd = 2)
    }
    legend(25, 250, c("Model 1 Prediction", "Model 2 Prediction"), pch = 16, 
           col = c("red", "blue"), bty = "n", cex = 1.2)
    points(mpgInput, model1pred(), col = "red", pch = 16, cex = 2)
    points(mpgInput, model2pred(), col = "blue", pch = 16, cex = 2)
  })
  
  output$pred1 <- renderText({
    model1pred()
  })
  
  output$pred2 <- renderText({
    model2pred()
  })
})
******************************************************************************************************

https://www.linkedin.com/pulse/easy-5-steps-build-your-shiny-app-interact-ml-models-decision-charpy
http://jadianes.me/sentiment-classifier-shiny
https://github.com/praneethj13/App_Random_Forest
https://www.google.com/search?q=random+forest+model+via+shiny+web+app&rlz=1C1OKWM_enUS771US771&oq=random+forest+model+via+shiny+web+app&aqs=chrome..69i57.16895j0j8&sourceid=chrome&ie=UTF-8
https://github.com/DataScienceSpecialization/courses/blob/master/09_DevelopingDataProducts/slidify/index.Rmd (notes link)

*****************************************************************************************************

AWS link:

https://aws.amazon.com/certification/certified-solutions-architect-associate/ 
https://aws.amazon.com/faqs/ 

AWS Certified Solutions Architect Official Study Guide (book name)
https://aws.amazon.com/resource-center/tutorials/ 
https://aws.amazon.com/resource-center/tutorials/ 


