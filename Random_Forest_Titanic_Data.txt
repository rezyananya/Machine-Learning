#Reading data:

library("readxl")
my_data <- read_excel("H:/Titanic.xlsx")
str(my_data)
library(dplyr)
data_fac= my_data %>% mutate_if(is.character, as.factor)
str(data_fac)
as.numeric(as.character(data_fac))
str(data_fac)



#Before we build our model, let's separate our data into testing and training sets.
library(caret)
set.seed(1234)
samp <- sample(nrow(data_fac), 0.7 * nrow(data_fac))
train <- data_fac[samp, ]
test <- data_fac[-samp, ]

#This will place 70% of the observations in the original dataset 
#into train and the remaining 30% of the observations into test.



# I am deleting columns having all missing values in it.
TrainingData<-train[,colSums(is.na(train)) == 0]
TestData <-test[,colSums(is.na(test)) == 0]
#TrainingData <-TrainingData[,-c(3,8,10,14)]
#TestData <-TestData[,c(1:15)]



#Graph showing the count of lost and retained
hist(TrainingData$survived, xlab = 'account info', main = 'Frequency', col = 'red')


#Building the model:
#Model using via Decision Tree - Training Data:

library(rpart)
library(rpart.plot)
tree = rpart(survived ~ ., data=TrainingData, method = "class")
rpart.plot(tree,main="Tree Structure of Surviver", extra=100, under=TRUE, faclen=2)

TreeModelOne <- predict(tree,TrainingData, type = "class")
confusionMatrix(TreeModelOne,TrainingData$survived)

#Model using via Decision Tree - Test Data:
tree = rpart(survived ~ ., data=TestData, method = "class")
rpart.plot(tree,main="Tree Structure of Surviver", extra=100, under=TRUE, faclen=2)

TreeModelOne <- predict(tree,TestData, type = "class")
confusionMatrix(TreeModelOne,TestData$survived)


#Model using via Random Forest:
TrainingData$survived <- as.character(TrainingData$survived)
TrainingData$survived <- as.factor(TrainingData$survived)

TestData$survived <- as.character(TestData$survived)
TestData$survived <- as.factor(TestData$survived)


#Training Data - Random Forest:
library(randomForest)
RandomForest = randomForest(survived ~ ., data=TrainingData, method = "class")
RandomForestModelTwo <- predict(RandomForest,TrainingData, type = "class")
confusionMatrix(RandomForestModelTwo,TrainingData$survived)

#Testing Data - Random Forest:
library(randomForest)
RandomForest = randomForest(survived ~ ., data=TestData, method = "class")
RandomForestModelTwo <- predict(RandomForest,TestData, type = "class")
confusionMatrix(RandomForestModelTwo,TestData$survived)



#Plot
plot(RandomForest, main = "Error rate of random forest")

#plot shows the class error rates of the random forest model. 
#As the number of trees increases, the error rate approaches zero.

#Prediction:

PredictionModel3<- predict(RandomForest,TestData,type="class")
PredictionModel3

PredictionModel4<- predict(RandomForest,TrainingData,type="class")
PredictionModel4

write.csv(PredictionModel3, file="C:/Users/Priyanka/Documents/Vitthal_Data/Prediction3.csv")

write.csv(PredictionModel4, file="C:/Users/Priyanka/Documents/Vitthal_Data/Prediction4.csv")

**********************************************************************************************************

#Reading data:

library("readxl")
my_data <- read_excel("H:/Titanic1.xlsx")
str(my_data)
library(dplyr)
data_fac= my_data %>% mutate_if(is.character, as.factor)
str(data_fac)
as.numeric(as.character(data_fac))
str(data_fac)


#Before we build our model, let's separate our data into testing and training sets.
library(caret)
set.seed(1234)
samp <- sample(nrow(data_fac), 0.7 * nrow(data_fac))
train <- data_fac[samp, ]
test <- data_fac[-samp, ]

#This will place 70% of the observations in the original dataset 
#into train and the remaining 30% of the observations into test.


# I am deleting columns having all missing values in it.
TrainingData<-train[,colSums(is.na(train)) == 0]
TestData <-test[,colSums(is.na(test)) == 0]
#TrainingData <-TrainingData[,c(-3,-8,-10,-14)]
#TestData <-TestData[,c(1:15)]
myvars <- names(TrainingData) %in% c("name", "ticket") 
TrainingData <- TrainingData[!myvars]
str(TrainingData)

myvars1 <- names(TestData) %in% c("name", "ticket","fare","embarked") 
TestData <- TestData[!myvars1]
str(TestData)

#Graph showing the count of lost and retained
hist(TrainingData$survived, xlab = 'account info', main = 'Frequency', col = 'red')


#Building the model:
#Model using via Decision Tree - Training Data:

library(rpart)
library(rpart.plot)
tree = rpart(survived ~ ., data=TrainingData, method = "class")
rpart.plot(tree,main="Tree Structure of Surviver", extra=100, under=TRUE, faclen=2)

TrainingData$survived <- as.character(TrainingData$survived)
TrainingData$survived <- as.factor(TrainingData$survived)

TreeModelOne <- predict(tree,TrainingData, type = "class")
confusionMatrix(TreeModelOne,TrainingData$survived)

#Model using via Decision Tree - Test Data:
tree = rpart(survived ~ ., data=TestData, method = "class")
rpart.plot(tree,main="Tree Structure of Surviver", extra=100, under=TRUE, faclen=2)

TestData$survived <- as.character(TestData$survived)
TestData$survived <- as.factor(TestData$survived)

TreeModelOne <- predict(tree,TestData, type = "class")
confusionMatrix(TreeModelOne,TestData$survived)


#Model using via Random Forest - Training Data:
TrainingData$survived <- as.character(TrainingData$survived)
TrainingData$survived <- as.factor(TrainingData$survived)


library(randomForest)
RandomForest = randomForest(survived ~ ., data=TrainingData, method = "class")
RandomForestModelTwo <- predict(RandomForest,TrainingData, type = "class")
confusionMatrix(RandomForestModelTwo,TrainingData$survived)

#Testing Data - Random Forest:
TestData$survived <- as.character(TestData$survived)
TestData$survived <- as.factor(TestData$survived)

library(randomForest)
RandomForest = randomForest(survived ~ ., data=TestData, method = "class")
RandomForestModelTwo <- predict(RandomForest,TestData, type = "class")
confusionMatrix(RandomForestModelTwo,TestData$survived)



#Plot
plot(RandomForest, main = "Error rate of random forest")

#plot shows the class error rates of the random forest model. 
#As the number of trees increases, the error rate approaches zero.

#Prediction:

PredictionModel3<- predict(RandomForest,TestData,type="class")
PredictionModel3

PredictionModel4<- predict(RandomForest,TrainingData,type="class")
PredictionModel4

write.csv(PredictionModel3, file="C:/Users/Priyanka/Documents/Vitthal_Data/Prediction3.csv")

write.csv(PredictionModel4, file="C:/Users/Priyanka/Documents/Vitthal_Data/Prediction4.csv")

